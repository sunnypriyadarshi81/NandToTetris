// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array masks;
    /** Initializes the library. */
    function void init() {
		let masks = Array.new(16);
		let masks[0] = 1;
		let masks[1] = 2;
		let masks[2] = 4;
		let masks[3] = 8;
		let masks[4] = 16;
		let masks[5] = 32;
		let masks[6] = 64;
		let masks[7] = 128;
		let masks[8] = 256;
		let masks[9] = 512;
		let masks[10] = 1024;
		let masks[11] = 2048;
		let masks[12] = 4096;
		let masks[13] = 8192;
		let masks[14] = 16384;
		let masks[15] = -32767 - 1;
		return;
	}
	
	/** Returns whether the ith bit of x is 1 */
	function boolean ith(int x, int i) {
		if ( x & masks[i] = 0) {return false;}
		return true;
	}
	
	/** Returns the length of the integer in binary*/
	function int n(int x) {
		if (x < 0) {return Math.n(-x);}
		if (x < 2) {return 1;}
		if (x < 4) {return 2;}
		if (x < 8) {return 3;}
		if (x < 16) {return 4;}
		if (x < 32) {return 5;}
		if (x < 64) {return 6;}
		if (x < 128) {return 7;}
		if (x < 256) {return 8;}
		if (x < 512) {return 9;}
		if (x < 1024) {return 10;}
		if (x < 2048) {return 11;}
		if (x < 4096) {return 12;}
		if (x < 8192) {return 13;}
		if (x < 16384) {return 14;}
		return 15;
	}
	
    /** Returns the absolute value of x. */
    function int abs(int x) {
		if ( x < 0 ) {return -x;}
		return x;
	}

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum;
		var int shiftedX;
		var int i;
		if (x < 0) {return - Math.multiply(-x, y);}
		if (y < 0) {return - Math.multiply(x, -y);}
		if (y > x) {return Math.multiply(y, x);}
		if (y = 2) {return x + x;}
		let i = 0;
		let sum = 0;
		let shiftedX = x;
		while (i < Math.n(y)) {
			if (Math.ith(y, i)) {let sum = sum + shiftedX;	}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}
		return sum;
	}

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int q;
		if (y = 0) {do Sys.error("Divide by 0");return 0;}
		if (x < 0) {return -Math.divide(-x, y);}
		if (y < 0) {return -Math.divide(x, -y);}
		if (y > x) {return 0;}
		let q = Math.divide(x, y + y);
		if ((x - ((q + q) * y)) < y) {return q + q;}
		else {return q + q + 1;}
	}
	
	/** Returns the 2 to the power of i*/
	function int power2(int i) {return masks[i];}
	
	/** Returns the square of x*/
	function int square(int x) {return x * x;}
	
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y;
		var int i;
		let y = 0;
		let i = Math.n(x) / 2 ;
		while (i > -1) {
			if ( ~ ( (Math.square((y + Math.power2(i))) < 0)|(Math.square((y + Math.power2(i))) > x )) ) {
				let y = y + Math.power2(i);
			}
			let i = i - 1;
		}
		return y;
	}

    /** Returns the greater number. */
    function int max(int a, int b) {
		if ( a > b) {return a;}
		return b;
	}

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if ( a < b ) {return a;}
		return b;
	}
}
