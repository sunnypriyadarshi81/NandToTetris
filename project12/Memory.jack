// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram;
	static int heapBase;
    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heapBase = 2048;
		let ram[heapBase] = -1;
		let ram[heapBase + 1] = 14334;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {return ram[address];}

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int object;
		var int free;
		var int i;
		let free = heapBase;
		while (~ (free = -1)) {
			if (ram[free + 1] > size) {
				let object = free + ram[free + 1] + 2 - size;
				let object[-1] = size;
				let ram[free + 1] = ram[free + 1] - size - 1;
				let i = 0;
				while (i < size) {
					let object[i] = 0;
					let i = i + 1;
				}
				return object;
			}
			let free = ram[free];
		}
		return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) { 
		var int free;
		let free = heapBase;
		while (~(ram[free] = -1)) {
			let free = ram[free];
		}
		let ram[free] = o - 1;
		let ram[o] = ram[o - 1] - 1;
		let ram[o - 1] = -1;
		return;
    }
}
