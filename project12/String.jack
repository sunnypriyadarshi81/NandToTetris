// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array str;
	field int length;
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength = 0) {
			let str = Array.new(1);
			let length = 0;
			return this;
		}
		let str = Array.new(maxLength);
		let length = 0;
		return this;
	}

    /** Disposes this string. */
    method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

    /** Returns the current length of this string. */
    method int length() {return length;}

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if (j > (length-1)) {
			do Sys.error("Index out of bound");
			return 0;
		}
		return str[j];
	}

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if (j > (length-1)) {
			do Sys.error("Index out of bound");
			return;
		}
		let str[j] = c;
		return;
	}

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if (length = str[-1]) {
			do Sys.error("String reached max length");
			return "";
		}
		let str[length] = c;
		let length = length + 1;
		return this;
	}

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if (length = 0) {
			do Sys.error("Erasing character from an empty String");
			return;
		}
		let length = length - 1;
		return;
	}

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int value;
		var int c;
		var int i;
		var boolean exit;
		var int neg;
		let neg = 1;
		let exit = false;
		let i = 0;
		let value = 0;
		if (charAt(i) = 45) {
			let neg = -1;
			let i = i + 1;
		}
		while( (~exit) & (i < length()) ) {
			let c = charAt(i);
			if ((c>47) & (c<58)) {let value = value * 10 + c - 48;}
			else {let exit = true;}
			let i = i + 1;
		}
		return value * neg;
	}
	
	/** Appends a String represending a non-negtive number to the end of the current String*/
    method String appendInt(int val) {
		var int c;
		let c = val - (val / 10 * 10) + 48;
		if (val < 10) {
			do appendChar(c);
			return this;
		}
		do appendInt(val / 10);
		do appendChar(c);
		return this;
	}
	
	/** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int i;
		let i = 0;
		let length = 0;
		if (val < 0) {
			do appendChar(45);
			do appendInt(-val);
			return;
		}
		do appendInt(val);
		return;
	}

    /** Returns the new line character. */
    function char newLine() {return 128;}

    /** Returns the backspace character. */
    function char backSpace() {return 129;}

    /** Returns the double quote (") character. */
    function char doubleQuote() {return 34;}
}
