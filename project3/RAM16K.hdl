// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in = load, sel = address[0..2], a = loada, b = loadb, c = loadc, d = loadd, e = loade, f = loadf, g = loadg, h = loadh);
    RAM4K(in = in, load = loada, address = address[3..14], out = outa);
    RAM4K(in = in, load = loadb, address = address[3..14], out = outb);
    RAM4K(in = in, load = loadc, address = address[3..14], out = outc);
    RAM4K(in = in, load = loadd, address = address[3..14], out = outd);
    RAM4K(in = in, load = loade, address = address[3..14], out = oute);
    RAM4K(in = in, load = loadf, address = address[3..14], out = outf);
    RAM4K(in = in, load = loadg, address = address[3..14], out = outg);
    RAM4K(in = in, load = loadh, address = address[3..14], out = outh);
    Mux8Way16(a = outa, b = outb, c = outc, d = outd, e = oute, f = outf, g = outg, h = outh, sel = address[0..2], out = out);
}